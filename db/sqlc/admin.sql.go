// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: admin.sql

package db

import (
	"context"
)

const addAdmin = `-- name: AddAdmin :one
INSERT INTO admins (
  name,
  email,
  phone,
  address,
  hashed_password 
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING admin_id, name, email, phone, address, hashed_password, created_at, password_changed_at
`

type AddAdminParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	Address        string `json:"address"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) AddAdmin(ctx context.Context, arg AddAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, addAdmin,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.HashedPassword,
	)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
  name,
  email,
  phone,
  address,
  hashed_password 
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING admin_id, name, email, phone, address, hashed_password, created_at, password_changed_at
`

type CreateAdminParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	Address        string `json:"address"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.HashedPassword,
	)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins WHERE admin_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, adminID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, adminID)
	return err
}
